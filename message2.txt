Perfect 👍 — this is your *“Execute MongoDB NoSQL Commands”* experiment.
Let’s go through it step-by-step so you can perform it easily — whether you’re using *Cloudera VM (Linux)* or testing commands on *your local system* later.

---

## 🧪 *Experiment Title:* Execute MongoDB NoSQL Commands

---

### 🎯 *Aim:*

To execute basic *MongoDB NoSQL commands* for database creation, collection management, and data operations such as insert, update, delete, and query.

---

### 🧠 *Theory (Short Overview):*

* *MongoDB* is a *NoSQL (non-relational)* database that stores data in flexible, JSON-like *documents* instead of rows and tables.
* It uses *collections* instead of tables and *documents* instead of rows.
* MongoDB allows you to handle large amounts of unstructured data with high performance and flexibility.

---

### ⚙ *Step 1: Start MongoDB*

In Cloudera or any Linux terminal:

bash
mongo


If it shows the prompt:


>


you are inside the Mongo shell.

---

### ⚙ *Step 2: Create or Switch to a Database*

js
use studentdb


✅ Output:


switched to db studentdb


---

### ⚙ *Step 3: Create a Collection*

js
db.createCollection("student")


✅ Output:


{ "ok" : 1 }


---

### ⚙ *Step 4: Insert Documents*

js
db.student.insert({name:"Krisha", age:21, dept:"CSE"})
db.student.insert({name:"Aditi", age:22, dept:"IT"})
db.student.insert({name:"Rahul", age:20, dept:"ECE"})


✅ Output:


WriteResult({ "nInserted" : 1 })


---

### ⚙ *Step 5: Display Documents*

js
db.student.find().pretty()


✅ Output:

json
{
  "_id" : ObjectId("..."),
  "name" : "Krisha",
  "age" : 21,
  "dept" : "CSE"
}
{
  "_id" : ObjectId("..."),
  "name" : "Aditi",
  "age" : 22,
  "dept" : "IT"
}
{
  "_id" : ObjectId("..."),
  "name" : "Rahul",
  "age" : 20,
  "dept" : "ECE"
}


---

### ⚙ *Step 6: Query Specific Data*

js
db.student.find({dept:"CSE"})


✅ Output: Only shows students in the CSE department.

---

### ⚙ *Step 7: Update a Record*

js
db.student.update(
  {name:"Krisha"},
  {$set:{age:23}}
)


✅ Output:


WriteResult({ "nMatched" : 1, "nModified" : 1 })


---

### ⚙ *Step 8: Delete a Record*

js
db.student.remove({name:"Rahul"})


✅ Output:


WriteResult({ "nRemoved" : 1 })


---

### ⚙ *Step 9: Count Documents*

js
db.student.count()


✅ Output:


2


---

### ⚙ *Step 10: Drop the Collection*

js
db.student.drop()


✅ Output:


true


---

### 📊 *Expected Output Summary:*

| Operation         | Command                          | Result              |
| ----------------- | -------------------------------- | ------------------- |
| Create Database   | use studentdb                  | Database switched   |
| Create Collection | db.createCollection("student") | OK = 1              |
| Insert Documents  | db.student.insert(...)         | nInserted : 1       |
| Query Data        | db.student.find()              | Shows inserted docs |
| Update Data       | db.student.update()            | nModified : 1       |
| Delete Data       | db.student.remove()            | nRemoved : 1        |
| Count             | db.student.count()             | Shows count         |
| Drop Collection   | db.student.drop()              | true                |

---

### 🧩 *If You Don’t Have MongoDB Installed*

You can test these same commands at:
🔗 [https://www.mongodb.com/try/download/shell](https://www.mongodb.com/try/download/shell)
or use an *online MongoDB playground* like:
🔗 [https://mongoplayground.net/](https://mongoplayground.net/)

Just paste the commands there — it works instantly without setup.

---

Would you like me to make a *Word document (.docx)* for this MongoDB experiment — including the *aim, theory, commands, and expected output* (formatted like your other practicals)?